kind: Template
apiVersion: v1
metadata:
  name: scj-booking
  annotations:
    openshift.io/display-name: SCJ Online Booking DeploymentConfig
    description: Online Booking System for British Columbia Superior Courts
    tags: dotnet
    iconClass: icon-dotnet
    template.openshift.io/provider-display-name: Red Hat, Inc.
    template.openshift.io/documentation-url: https://github.com/redhat-developer/s2i-dotnetcore
    template.openshift.io/support-url: https://access.redhat.com
message: |-
  The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.

  For more information about using this template, including OpenShift considerations, see https://github.com/redhat-developer/s2i-dotnetcore.
labels:
  template: scj-booking
objects:

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: ${NAME}-allow-ingress
      labels:
        name: ${NAME}-allow-ingress
        env: ${TAG_NAME}
    spec:
      description: |
        Allow traffic from routes into the application container(s).
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
      podSelector:
        matchLabels:
          name: ${NAME}
      policyTypes:
        - Ingress

  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: ${NAME}
      labels:
        name: ${NAME}
        env: ${TAG_NAME}
    spec:
      description: |
        Allow the application to access the database.
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  name: ${NAME}
              namespaceSelector:
                matchLabels:
                  name: ${NAMESPACE_NAME}
                  environment: ${TAG_NAME}
          ports:
            - protocol: TCP
              port: 5432
      podSelector:
        matchLabels:
          name: ${DATABASE_SERVICE_NAME}

  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${NAME}
    stringData:
      database-password: ${DATABASE_PASSWORD}
      api-password: ${API_PASSWORD}
      connect-string: Host=${DATABASE_SERVICE_NAME};Database=${DATABASE_NAME};Username=${DATABASE_USER};Password=${DATABASE_PASSWORD}
      exchange-client-secret: ${EXCHANGE_CLIENT_SECRET}

  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
    spec:
      ports:
        - name: web
          port: 8080
          targetPort: 8080
      selector:
        name: ${NAME}

  - kind: Route
    apiVersion: v1
    metadata:
      name: ${NAME}-siteminder-route
      annotations:
        haproxy.router.openshift.io/ip_whitelist: ${SITEMINDER_WHITE_LIST}
    labels:
      app: ${NAME}-siteminder-route
    spec:
      host: ${SITEMINDER_APPLICATION_DOMAIN}
      port:
        targetPort: web
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${NAME}

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}
      annotations:
        description: Defines how to deploy the application server
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        resources: {}
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - scj-booking
            from:
              kind: ImageStreamTag
              namespace: ${IMAGE_NAMESPACE}
              name: ${NAME}-runtime:${TAG_NAME}
        - type: ConfigChange
      replicas: 1
      selector:
        name: ${NAME}
      template:
        metadata:
          name: ${NAME}
          labels:
            name: ${NAME}
        spec:
          containers:
            - name: scj-booking
              image: " "
              ports:
                - containerPort: 8080
              env:
                - name: ConnectionString
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}
                      key: connect-string
                - name: TAG_NAME
                  value: ${TAG_NAME}
                - name: API_ENDPOINT
                  value: ${API_ENDPOINT}
                - name: API_USERNAME
                  value: ${API_USERNAME}
                - name: API_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}
                      key: api-password
                - name: SC_EMAIL
                  value: ${SC_EMAIL}
                - name: CA_EMAIL
                  value: ${CA_EMAIL}
                - name: EXCHANGE_TENANT_ID
                  value: ${EXCHANGE_TENANT_ID}
                - name: EXCHANGE_CLIENT_ID
                  value: ${EXCHANGE_CLIENT_ID}
                - name: EXCHANGE_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}
                      key: exchange-client-secret
                - name: ASPNETCORE_ENVIRONMENT
                  value: ${ASPNETCORE_ENVIRONMENT}
              resources:
                limits:
                  memory: ${MEMORY_LIMIT}
              livenessProbe:
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 120
                timeoutSeconds: 10
              readinessProbe:
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 120

  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}

  - kind: Service
    apiVersion: v1
    metadata:
      name: ${DATABASE_SERVICE_NAME}
      annotations:
        description: Exposes the database server
    spec:
      ports:
        - name: postgresql
          port: 5432
          targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${DATABASE_SERVICE_NAME}
      annotations:
        description: Defines how to deploy the database
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              namespace: openshift
              name: postgresql:12
        - type: ConfigChange
      replicas: 0
      selector:
        name: ${DATABASE_SERVICE_NAME}
      template:
        metadata:
          name: ${DATABASE_SERVICE_NAME}
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          volumes:
            - name: ${DATABASE_SERVICE_NAME}-data
              persistentVolumeClaim:
                claimName: ${DATABASE_SERVICE_NAME}
          containers:
            - name: postgresql
              image: " "
              ports:
                - containerPort: 5432
              readinessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 5
                exec:
                  command:
                    - /bin/sh
                    - -i
                    - -c
                    - psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c 'SELECT 1'
              livenessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 30
                tcpSocket:
                  port: 5432
              volumeMounts:
                - name: ${DATABASE_SERVICE_NAME}-data
                  mountPath: /var/lib/pgsql/data
              env:
                - name: POSTGRESQL_USER
                  value: ${DATABASE_USER}
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}
                      key: database-password
                - name: POSTGRESQL_DATABASE
                  value: ${DATABASE_NAME}
                - name: POSTGRESQL_MAX_CONNECTIONS
                  value: ${POSTGRESQL_MAX_CONNECTIONS}
                - name: POSTGRESQL_SHARED_BUFFERS
                  value: ${POSTGRESQL_SHARED_BUFFERS}
              resources:
                limits:
                  memory: ${MEMORY_POSTGRESQL_LIMIT}

parameters:
  - name: NAME
    displayName: Name
    description: The name assigned to all of the frontend objects defined in this template.
    required: true
    value: scj-booking
  - name: NAMESPACE_NAME
    displayName: Namespace Name
    description: The base namespace name for the project.
    required: true
    value: bc7c5c
  - name: IMAGE_NAMESPACE
    displayName: Image Namespace
    description: Namespace containing application images.
    required: true
    value: bc7c5c-tools
  - name: TAG_NAME
    displayName: Environment TAG name
    description: The TAG name for this environment, e.g., dev, test, prod.
    required: true
    value: ""
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    required: true
    description: Maximum amount of memory the .NET Core container can use.
    value: 128Mi
  - name: MEMORY_POSTGRESQL_LIMIT
    displayName: Memory Limit (PostgreSQL)
    required: true
    description: Maximum amount of memory the PostgreSQL container can use.
    value: 128Mi
  - name: VOLUME_CAPACITY
    displayName: Volume Capacity
    description: Volume space available for data, e.g. 512Mi, 2Gi
    value: 256Mi
    required: true
  - name: DATABASE_SERVICE_NAME
    required: true
    displayName: Database Service Name
    value: postgresql
  - name: DATABASE_USER
    displayName: Database Username
    generate: expression
    from: user[A-Z0-9]{3}
  - name: DATABASE_PASSWORD
    displayName: Database Password
    generate: expression
    from: "[a-zA-Z0-9]{8}"
  - name: DATABASE_NAME
    required: true
    displayName: Database Name
    value: scj_booking
  - name: POSTGRESQL_MAX_CONNECTIONS
    displayName: Maximum Database Connections
    value: "100"
  - name: POSTGRESQL_SHARED_BUFFERS
    displayName: Shared Buffer Amount
    value: 12MB
  - name: API_ENDPOINT
    displayName: SOAP Endpoint URL
    description: URL of the SCSS endpoint
    required: true
  - name: API_USERNAME
    displayName: API Username
    description: Basic auth username for the SCSS SOAP API
    required: true
  - name: API_PASSWORD
    displayName: API Password
    description: Basic auth password for the SCSS SOAP API
    required: true
  - name: SC_EMAIL
    displayName: Supreme Court Sender Email Address
    required: true
    value: noreply_BCSC_Booking@bccourts.ca
  - name: CA_EMAIL
    displayName: Court of Appeal Sender Email Address
    required: true
    value: noreply_BCCA_Booking@bccourts.ca
  - name: EXCHANGE_TENANT_ID
    displayName: Office 365 Tenant Id
    required: true
    value: ""
  - name: EXCHANGE_CLIENT_ID
    displayName: Office 365 Client Id
    required: true
    value: ""
  - name: EXCHANGE_CLIENT_SECRET
    displayName: Office 365 Client Secret
    required: true
    value: ""
  - name: SITEMINDER_APPLICATION_DOMAIN
    displayName: SiteMinder Application Domain
    description: The endpoint used for SiteMinder routed access to the application (*.bcgov domain).
    required: true
  - name: SITEMINDER_WHITE_LIST
    displayName: SiteMinder Whitelist
    description: The space-delimited whitelist containing all of the trusted siteminder IPs.
    required: false
  - name: ASPNETCORE_ENVIRONMENT
    displayName: Hosting Environment (ASPNETCORE_ENVIRONMENT)
    description: "'Development', 'Test', or 'Production'"
    required: true
    value: ""
