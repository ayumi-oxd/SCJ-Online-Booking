//
// core-build-pipeline 
// 
// This Jenkins pipeline runs the main build to execute unit tests, publish the web project,
// and run webpack.  The final output is gzipped and left on a folder inside the image where
// it is used later by the next pipeline in the chain, "create-runtime-and-deploy-to-dev"
//
import com.openshift.jenkins.plugins.OpenShiftDSL;

void build(OpenShiftDSL openshift, String buildConfigName, int waitTimeout = 10, String contextDirectory = '', String envVars = '') {

  def buildFromDir = ''

  // Find all of the build configurations associated to the application ...
  echo "Looking up build configurations for ${buildConfigName} ..."
  def buildconfigs = openshift.selector("bc", "${buildConfigName}")
  echo "Found ${buildconfigs.count()} buildconfigs: ${buildconfigs.names()}"

  // Inject environment variables into the build as needed ...
  if (envVars?.trim()) {
    echo "Setting environment variables on bc/${buildConfigName} ..."
    echo "envVars: ${envVars}"
    buildconfigs.set("env bc/${buildConfigName} ${envVars}")
  }

  // Perform a binary build as needed ...
  if (contextDirectory?.trim()) {
    echo "Setting up for binary build using the source in the ${contextDirectory} directory ..."
    buildFromDir = "--from-dir='${contextDirectory}'"
    echo "buildFromDir: ${buildFromDir}"
  }

  // Cancel all running builds, starting over ...
  echo "Canceling all previous build instances ..."
  buildconfigs.cancelBuild()

  // Kick off all the builds in parallel ...
  def builds = buildconfigs.startBuild("${buildFromDir}")
  echo "Started ${builds.count()} builds: ${builds.names()}"

  timeout(waitTimeout) {
    // Wait for all the builds to complete ...
    // This section will exit after the last build completes.
    echo "Waiting for builds to complete ..."
    builds.withEach {
      // untilEach and watch - do not support watching multiple named resources,
      // so we have to feed it one at a time.
      it.untilEach(1) {
          echo "${it.object().status.phase} - ${it.name()}"
          return (it.object().status.phase == "Complete")
      }
    }
  }

  echo "Builds complete ..."
}

node {
  properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']]])  

  def waitTimeout = 30
  def pipeline_name = "core-build-pipeline"
  def buildApps = ['scj-booking-build']

  stage("Cancel previous builds") {
    script {
      openshift.withCluster() {
        openshift.withProject() {
          echo "Looking for the latest ${pipeline_name} build ..."
          def latestBuildNumber = 0
          def builds = openshift.selector("build", [ name : "${pipeline_name}" ])
          builds.withEach {
            int nextBuildNumber = "${it.object().metadata.annotations.get("openshift.io/build.number")}" as Integer
            echo "${it.name()} ..."
            if (nextBuildNumber > latestBuildNumber) {
              latestBuildNumber = nextBuildNumber
            }
          }

          echo "Latest build number is ${latestBuildNumber}, canceling all previous pipeline instances ..."
          builds.withEach {
            int buildNumber = "${it.object().metadata.annotations.get("openshift.io/build.number")}" as Integer
            if (buildNumber != latestBuildNumber) {
              echo "Canceling ${it.name()} ..."
              it.cancelBuild()
            }
          }
        }
      }
    }
  }

  buildApps.each {
    stage("Build ${it}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {
            echo "Building the ${it} image ..."
            build(openshift, "${it}", waitTimeout)
          }
        }
      }
    }
  }
}